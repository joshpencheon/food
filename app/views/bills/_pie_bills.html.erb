<%# render bills %>

<canvas id="pie_controller" width="400" height="400">
  Polite notice: your browser sucks.
</canvas>

<%= form.fields_for :bills do |bills_form| %>
  <%= bills_form.hidden_field :proportion %>
<% end %>

<a id="pie_equalise" href="#">Equalise</a>

<% segments = [] %>
<% pie_bills.each_with_index do |bill, index|  
  skew = segments.any? ? segments.last[:bounds][:max] : -Math::PI
  
  segments << {
    :bill => bill.id,
    :fieldId => "#basket_bills_attributes_#{index}_proportion",
    :proportion => bill.proportion,
    :originalProportion => bill.proportion,
    :bounds => { :min => 0, :max => 0 }
    # :bounds => { :min => skew, :max => skew + (Math::PI * bill.proportion.to_f / 50) }
  }
end %>

<script type="text/javascript" charset="utf-8">

  var V = {
    init: function(x, y) {
      return { x: x, y: y };
    },
    
    sub: function(v1, v2) {
      return V.init(v1.x-v2.x, v1.y-v2.y);
    },
    
    magnitude: function(v) {
      return Math.sqrt( V.dot(v, v) );
    },
    
    dot: function(v1, v2) {
      return v1.x*v2.x + v1.y*v2.y;
    },
    
    cross: function(v1, v2) {
      return v1.x*v2.y - v1.y*v2.x
    },
    
    scale: function(v, k) {
      return { x: v.x*k, y: v.y*k };
    },
    
    normalize: function(v) {
      return V.scale(v, 1 / V.magnitude(v));
    },
    
    angle: function(v1, v2) {
      return Math.atan2( V.cross(v1, v2), V.dot(v1, v2) ) % (2*Math.PI);
    }
  };

  var ctx = $('#pie_controller')[0].getContext("2d");
  
  var mouseDownOver;
  var originalProportion;
  var mouse = {
    p: V.init(0, 0),
    d: V.init(0, 0)
  };
  
  
  $(ctx.canvas).mousedown(function(e){        
    mouse.p.x = e.pageX - $(this).offset().left,
    mouse.p.y = e.pageY - $(this).offset().top;
    
    var vector = { x: mouse.p.x - 200, y: 200 - mouse.p.y };
    
    // var angleFromO = V.angle(vector, V.init(0, -1));
    var angleFromO = V.angle(vector, V.init(1, 0));
    var matchedIndex;
    
    for(i=0; i < segments.length; i++) {
      if ((angleFromO > segments[i].bounds.min) && (angleFromO < segments[i].bounds.max)) {
        matchedIndex = i;
        break;
      };
    };
    
    // console.log(colors[matchedIndex % colors.length])
    
    mouseDownOver = segments[matchedIndex];
    originalProportion = mouseDownOver.originalProportion;
  });
   
  $(ctx.canvas).mouseup(function(e){
    mouseDownOver = null;
    
    $.each(segments, function(index) {
      this.originalProportion = this.proportion;
      $(this.fieldId).val(this.originalProportion);
    });
  });
  
  $('#pie_equalise').click(function(e) {    
    $.each(segments, function(index) {
      this.proportion = 100/segments.length;
      this.originalProportion = this.proportion;
      $(this.fieldId).val(this.originalProportion);
    });
    
    e.preventDefault();
  });

  $(ctx.canvas).mousemove(function(e) {
    if (mouseDownOver) {         
      mouse.d.x = e.pageX - $(this).offset().left;
      mouse.d.y = e.pageY - $(this).offset().top;

      var otherSegments = $(segments).reject(function() { return this == mouseDownOver }),
          currentDistToO = V.magnitude(V.sub(mouse.d, V.init(200, 200))),
          initialDistToO = V.magnitude(V.sub(mouse.p, V.init(200, 200))),
          newProportion;
    
      // What is our new proportion?
      if (currentDistToO < initialDistToO) {
        newProportion = originalProportion * currentDistToO / initialDistToO;
      } else {
        newProportion = originalProportion + (currentDistToO - initialDistToO);
      }
      
      var bound = function(value) {
        return Math.max(1, Math.min(100 - otherSegments.length, value))
      }

      mouseDownOver.proportion = bound(newProportion);
      var incAmount = mouseDownOver.proportion - mouseDownOver.originalProportion;
      var totalOther = 100 - mouseDownOver.proportion;
      
      $.each(otherSegments, function(index) {                      
        this.proportion = bound(this.originalProportion - (incAmount * this.originalProportion / totalOther));
      });
      
      // Distribute any rounding error amoung the other segments:
      var roundingError = (100 - $(segments).map(function() { return this.proportion }).sum());
      $.each(otherSegments, function(index) { this.proportion += (roundingError / otherSegments.length) });
    }
  });
   
  
  var angle = 0;
  var segments = $.parseJSON('<%= ActiveSupport::JSON.encode(segments).html_safe %>');
  var colors = [ 'red', 'green', 'yellow', 'blue', 'orange' ];
  
  ctx.translate(200, 200);
  
  setInterval(function(){    
    ctx.clearRect(-200, -200, 400, 400);    
    ctx.save()
    ctx.rotate(angle += 0.0);
    
    for(i=0; i < segments.length; i++) { 
      var skew = (i>0 ? segments[i-1].bounds.max : -Math.PI);
      segments[i].bounds.min = skew;
      segments[i].bounds.max = skew + (Math.PI*segments[i].proportion / 50) ;
      
      ctx.beginPath()
      ctx.moveTo(0, 0);
      ctx.arc(0, 0, 160, segments[i].bounds.min, segments[i].bounds.max, false); 
      ctx.closePath()
      ctx.fillStyle = colors[i % colors.length];
      ctx.fill();      
    }
    
    ctx.restore()  
  }, 30);
     
</script>